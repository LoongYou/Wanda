开发规范
1、函数式风格
2、函数式接口
  -入参只能是map<String,String>、基本数据类型
  -入参不能为其他类型引用对象
  -map入参字段名只定义一次，避免重复建模和代码泛滥
3、接口的划分
  -不同维度的行为定义为不同的接口，如doc的维度、APP为度，不管当前及阶段该维度的操作是否及其简单，也无比划分接口
  -同一个维度内，不同的类型的操作定位为子接口，如创建子接口、修改子接口（通常也就是创建、修改、转换，这几种类型），如果跨度很小，则不需要子接口
  
4、方法定义
 -基于函数式风格，原则上方法必须有返回值，并且不建议通过抛出异常来阻断流程，而是明确的根据错误返回对应的值
 -没有返回值的方法仅限于初始化阶段或者结束阶段，这类方法中通常需要抛出异常来中断流程
 -方法的返回值类型，原则上返回多项数据使用map，这样可以在一定程度上实现动态类型返回，对于复杂数据类型的，建议使用json格式
 -工作流形式的函数，结果、产出、配置，必需返回其一种或多中
 -方法按照实现功能的层级划分粒度为：函数、工序、工作流，函数式最小粒度，不涉及自定义对象，这些函数都非常原始，不调用外部对象，也不涉及有状态的系统对象使用，不会有显式的异常定义，甚至内部不考虑异常以及日志输出，无状态和副作用，则定义为函数接口，工序是多个函数完成的若干个步骤组成
 
 5、类型定义
 -工具类是final类，但不是接口类，因为工具类也可以通过实现接口来获取基础函数的使用，如日志和响应，这种类里面的方法以调用系统IO、外部类库为主要特征
 -函数库是一个接口，里面按照操名划分函数类型，并放在对应的子接口内，从而达到模块化的模式，如IDNO.verify.age，即证件号函数库中的校验模块，使用这个模块中的age函数，这种接口类的函数方法都是以纯计算、纯函数为主要特征
 -一些基础的、单一的公共方法，如打印日志、响应交互、错误码等可以定义为接口类，这样可更大程度的利用多重继承
 -工序相对于某工作流应该是公共的，通常定义在接口作为默认方法实现
 -工作流是根据上层业务需求对工序的装配调用